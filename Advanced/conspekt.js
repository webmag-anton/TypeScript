
// 1. npm init -y
// 2. npm i -D typescript
// 3. создаем index.html в корне и подключаем materialize.css с помощью CDN:
// <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css"></link>

// 4. инициализируем конфиг TypeScript: tsc --init
// 5. добавляем поле exclude, значением которого является массив папок и 
// файлов, которые не нужно компилировать, в конфигурационный файл; 
// /node_modules можно не указывать, он по умолчанию не компилируется.
// Аналогично в конфиге можно задать массив include (компилировать указанные в 
// массиве папки и файлы) и массив files (компилировать указанные файлы)
// 6. раскоментируем поля rootDir и outDir, в которых указываем 
// откуда берем и куда складываем все скомпелированные файлы при выполнении команды tsc
// 7. подключаем скомпилированный скрипт приложения в index.html:
// <script src='./dist/app.js' defer></script> 
// 8. в поле target можно указать в какую версию js компилировать ts (es6...)
// 9. По умолчанию, если раскоментировать поле lib в конфиге и в качестве значения оставить 
// пустой массив, то TS не будет понимать browser API, т.е. не будет объекта document и т.д.
// Но если не указывать lib, то весь базовый функционал будет работать.
// Настройка поля lib в конфиге регулирует, какие библиотеки необходимо включить в 
// понимание TS. Список того, что может быть в массиве lib: https://www.typescriptlang.org/tsconfig/#lib
// 10. если раскоментировать поле sourceMap, то в браузере во вкладке Sources будет выден исходный TS
// 11. если раскоментировать поле removeComments, то в скомпилированном js не будет комментариев
// 12. добавляем в конфиг   "noEmitOnError": true,    /* не компилировать код, если в нем есть ошибка */
// 13. поле "strict": true включает значение true для всех нижележащих Strict Type-Checking Options:
// "noImplicitAny": true  служит для выкидывания ошибки, если мы не задали тип параметру ф-ии;
// "strictNullChecks": true  служит для выкидывания ошибки, если мы, например, не
//  задали ! после document.querySelector('#btn'), т.е. если может вернуться null;
// 14. "noUnusedLocals": true  предупреждение, если есть локальная неиспользуемая переменная
// "noUnusedParameters": true  предупреждения, если есть неиспользуемые параметры ф-ии
// "noImplicitReturns": true   предупреждения, если функция может что то явно не вернуть

// 15. создаем и подключаем  <script src='./dist/generic.js' defer></script> 

// 16. создаем и подключаем  <script src='./dist/decorators.js' defer></script> 
// чтобы TS понимал синтаксис декораторов, нужно в конфиге раскоментировать эксперементальную фичу:
// "experimentalDecorators": true

// 17. создаем и подключаем  <script src='./dist/namespaces.js' defer></script>



Комманды:

tsc                                    compilate all ts files to js files, 
                                       except files from exclude array at config

tsc --watch                            tsc -w; следить за изменениями и автоматически 
                                       компилировать ts, чтобы каждый раз не выполнять tsc 



Пакеты:

typescript                             функционал typescript